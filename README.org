* Formation.tools App
:PROPERTIES:
:CUSTOM_ID: formation.tools-app
:END:

‚ö†Ô∏è Yups, this is GPL3 because I'm using [[https://github.com/rasendubi/uniorg][@rasendubi's uniorg]]. I've been freaking out a bit about the licensing point for a while but then again... if I'm honest about this being a /scrappy prototype/, I should be fine sharing the code. ü§∑üèø‚Äç‚ôÇÔ∏è If there is a moat to this idea that I'm flirting with, it will not be around this part. There are a lot of things around offering this as a managed service, covering the collaborative editing bits and also adding integrations and assist features like GPT-3-powered "ELI5 style" paraphrasing features to ensure that different audiences can consume the same content in a manner that serves them well enough. Imagine paraphrasing a complex technical text to extract the 3 core points for a legal or business audience -- not saying that this is even remotely possible but it's part of the marketplace and platform idea that I'm also playing with. Too early to say though. I'm collecting brutally honest feedback to figure out if I'm just full of it or if I maybe unto something so don't be shy and hit me up if this speaks to you.

** Usage

Enter the link to a raw dump of any Org file on the internet into the text field in the navigation bar. Here are some pages to visit:
1. https://gitlab.com/pages/org-mode/-/raw/master/post0.org
2. https://raw.githubusercontent.com/formation-tools/product/main/README.org

** Development
:PROPERTIES:
:CUSTOM_ID: development
:END:

1. Run =npm ci= to install dependencies.
2. Run =npm run dev= for UI development (and find the port to which to navigate your browser in the console output)
3. Run =npm run fmt:fix= before committing to ensure that your changes are are compatible with the styleguide.

*** Install dependencies
:PROPERTIES:
:CUSTOM_ID: install-dependencies
:END:

#+begin_quote
üí° We only want to use =npm install= when we are installing new packages and have the express intention of making changes to the package-lock.json file.
#+end_quote

Using =npm ci= as opposed to =npm install= will ensure that we do not casually update the package-lock.json file (in case one is using an older version of npm that specificied in the package.json engines property). Casual changes to the package-lock.json file can complicate merging since the package-lock.json file can get quite noisy, resulting to many changes that one needs to painstakingly isolate in a merge conflict.

*** Start development session
:PROPERTIES:
:CUSTOM_ID: start-development-session
:END:
When working on the UI, running =npm run dev= is helpful. When working on logic it may actually be more helpful to watch core logic source files and run =npm run build= as this recompiles the code on every change and communicates compiler errors more clearly.

#+begin_src shell
ls core/**/*.ts core/**/*.tsx pages/**/*.tsx components/**/*.tsx  | entr  npm run build
#+end_src

#+begin_quote
üí° While working on the parsing or rendering logic, the =npm run build= tool may be the tool to use.
#+end_quote

*** Format code (according to project styleguide)
:PROPERTIES:
:CUSTOM_ID: format-code-according-to-project-styleguide
:END:
This is important because some editors fudge the source files a bit which produces a lot of changes that don't really affect the UI or the logic at all and are therefore just noise. Running everything through the same formatter will ensure that the only thing ending up in the commit are changes to UI or logic and not just editor opinions. üòÖ

#+begin_quote
üí° Run =npm run fmt:fix:watch= in a separate terminal to not have to think about this. It will watch relevant source files and rerun the formatter whenever they change and offering us less thing to think about while developing.
#+end_quote

*** Test code
:PROPERTIES:
:CUSTOM_ID: test-code
:END:
Run =npm run test= in order to run the tests. The test runner is pretty convenient and will provide facilities to do the following from within the test running TUI:

- narrow down tests based on patterns
- generate or update snapshots when changes are detected
- retrigger complete test re-runs

** Resources
:PROPERTIES:
:CUSTOM_ID: resources
:END:
[[https://gitlab.com/formation.tools/intel/product-vision][Product respository]]: it contains all relevant information and the [[https://gitlab.com/formation.tools/intel/product-vision/-/blob/main/Roadmap.org][ROADMAP.org]] file.

- [[https://gitlab.com/formation.tools/app/formation.tools-app][App respository GitLab]]
- [[https://www.figma.com/file/DenroEWfValwUxKZJdtLW7/formation.tools-(Copy)][Figma file]]
- [[https://gitlab.com/formation.tools/app/formation.tools-app/-/boards/4514126][Issues Board]]
- [[https://app-formation-tools-app-three.vercel.app/][Vercel app]]
- [[https://vercel.com/formation-tools/app-formation-tools-app][Vercel dashboard]]

** Technologies
:PROPERTIES:
:CUSTOM_ID: technologies
:END:

- Next.js
- Typescript
- [[https://v2.grommet.io/][Grommet]]
- [[https://swr.vercel.app/][SWR]]
- [[https://react-syntax-highlighter.github.io/react-syntax-highlighter/][react-syntax-highlighter]], used for the Code component
- [[https://storybook.js.org/][Storybook]]: You can check our Storybook [[https://633eb19a9c0848aaa425cdee-kypdndgiwn.chromatic.com/][here]]

*** Analytics

We are using Plausible for analytics and load the necessary script using the =afterInteractive= strategy to improve the load performance.

*** Supabase

**** Tooling

You can install the Supabase CLI from npm using the following command:

#+begin_src bash
npm install --save-dev supabase
#+end_src

You can use the cli through the =npx supabase= command.

Note that the npm-install binary not reliably work in NixOS because it attempts to resolve libs to FHS paths which are not resolvable on some Nix systems. There is a commit that packages supabase for Nix that we've pulled into our nix shell config to install nix on NixOS. So a nix shell should bundle supabase through the =supabase= command.

**** Base Configuration

We need to configure the following env variables for Supabase to work:
- =NEXT_PUBLIC_SUPABASE_URL=
- =NEXT_PUBLIC_SUPABASE_ANON_KEY=

Observe the following snippet which you can adapt and add to our file:.env.local to get Supabase set up.

#+begin_src bash
NEXT_PUBLIC_SUPABASE_URL=https://blah.tld
NEXT_PUBLIC_SUPABASE_ANON_KEY="blah"
#+end_src

**** Auth

#+begin_comment
After trying to setup Ory for a long time (on-and-off) and even with some help from the Ory team (Vincent and the CTO have been more than helpful), I have to conclude that I am still too much of an idiot to get it working, so I'm opting for Supabase to move things along. Would like to revisit the Ory topic at a later point in time since I think that their Auth stack is pretty rich but definitely more of a "nice to have" atm.

For now, we're just moving ahead with [[https://supabase.com/docs/guides/auth/overview][Supabase Auth]].
#+end_comment

Configure Supabase Auth by:
1. configuring a [[https://supabase.com/docs/guides/auth/social-login/auth-github][GitHub OAuth app]] and a [[https://supabase.com/docs/guides/auth/social-login/auth-gitlab][GitLab OAuth app]]
2. defining =NEXT_PUBLIC_VERCEL_URL= in your file:.env.local to =http://localhost:3000= for local development or the actual app URL otherwise (which is automatically set in Vercel[fn:1]

   #+begin_src bash
NEXT_PUBLIC_VERCEL_URL=http://localhost:3000
   #+end_src

* Footnotes

[fn:1] In case you deploy your app to Vercel, the =NEXT_PUBLIC_VERCEL_URL= is automatically set to the deployment URL, also for preview deployments.
